class f{static BACKUP_IMAGES={"1:1":["https://picsum.photos/512/512?random=1","https://picsum.photos/512/512?random=2","https://picsum.photos/512/512?random=3","https://picsum.photos/512/512?random=4"],"16:9":["https://picsum.photos/768/432?random=5","https://picsum.photos/768/432?random=6","https://picsum.photos/768/432?random=7","https://picsum.photos/768/432?random=8"],"4:3":["https://picsum.photos/640/480?random=9","https://picsum.photos/640/480?random=10","https://picsum.photos/640/480?random=11","https://picsum.photos/640/480?random=12"]};static getImageDimensions(t="1:1"){switch(t){case"16:9":return{width:1024,height:576};case"4:3":return{width:1024,height:768};case"1:1":default:return{width:1024,height:1024}}}static async generateImage(t){try{const e="https://image.pollinations.ai/prompt";let n=t.prompt;t.style==="vivid"?n+=", hyperrealistic, vibrant colors, dramatic lighting, high contrast, detailed":t.style==="natural"&&(n+=", natural lighting, realistic, soft colors, photographic style");const r=t.aspectRatio||"1:1";r==="16:9"?n+=", wide landscape composition, cinematic framing":r==="4:3"&&(n+=", classic composition, balanced framing");const a=encodeURIComponent(n),o=this.getImageDimensions(r),i=Math.floor(Math.random()*1e6),c=[`${e}/${a}?width=${o.width}&height=${o.height}&seed=${i}&enhance=true&nologo=true`,`${e}/${a}?width=${o.width}&height=${o.height}&seed=${i}`,`${e}/${a}?width=${o.width}&height=${o.height}`,`${e}/${a}`,`${e}/${encodeURIComponent(t.prompt)}?width=${o.width}&height=${o.height}`,`${e}/${encodeURIComponent(t.prompt)}`];let m="",d=null;for(const p of c)try{const s=new AbortController,w=setTimeout(()=>s.abort(),1e4),h=await fetch(p,{signal:s.signal,method:"GET"});if(clearTimeout(w),!h.ok)throw new Error(`Pollinations service returned ${h.status}`);const l=h.headers.get("content-type");if(!l||!l.startsWith("image/"))throw new Error(`Pollinations service returned non-image content: ${l}`);const g=h.headers.get("content-length");if(g&&parseInt(g)===0)throw new Error("Pollinations service returned empty image");m=p;break}catch(s){d=s,console.warn(`URL format failed: ${p}`,s);continue}if(!m)throw d||new Error("All Pollinations URL formats failed");return{id:`pollinations_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,url:m,prompt:t.prompt,timestamp:new Date,aspectRatio:r}}catch(e){console.warn("Pollinations AI failed, trying alternative service:",e);try{return await this.generateWithAlternativeService(t)}catch(n){return console.warn("Alternative service failed, using demo images:",n),this.generateDemoImage(t)}}}static async generateWithAlternativeService(t){try{const e=this.getImageDimensions(t.aspectRatio),n=`https://picsum.photos/${e.width}/${e.height}?random=${Math.floor(Math.random()*1e3)}`,r=await fetch(n,{method:"HEAD"});if(!r.ok)throw new Error(`Alternative service returned ${r.status}`);return{id:`alternative_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,url:n,prompt:t.prompt,timestamp:new Date,aspectRatio:t.aspectRatio||"1:1"}}catch(e){throw console.warn("Alternative service failed:",e),new Error("Alternative service failed")}}static async generateDemoImage(t){await new Promise(o=>setTimeout(o,1500+Math.random()*500));const e=t.aspectRatio||"1:1",n=this.BACKUP_IMAGES[e],r=Math.floor(Math.random()*n.length),a=n[r];try{const o=await fetch(a,{method:"HEAD"});if(!o.ok)throw new Error(`Demo image service returned ${o.status}`)}catch(o){console.warn("Demo image failed, using fallback URL:",o);const i=this.getImageDimensions(e),c=`https://picsum.photos/${i.width}/${i.height}?random=${Math.floor(Math.random()*1e3)}`;return{id:`demo_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,url:c,prompt:t.prompt,timestamp:new Date,aspectRatio:e}}return{id:`demo_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,url:a,prompt:t.prompt,timestamp:new Date,aspectRatio:e}}}export{f as I};
